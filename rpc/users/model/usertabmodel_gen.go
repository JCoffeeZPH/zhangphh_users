// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userTabFieldNames          = builder.RawFieldNames(&UserTab{})
	userTabRows                = strings.Join(userTabFieldNames, ",")
	userTabRowsExpectAutoSet   = strings.Join(stringx.Remove(userTabFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), ",")
	userTabRowsWithPlaceHolder = strings.Join(stringx.Remove(userTabFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), "=?,") + "=?"

	cacheUserTabIdPrefix = "cache:userTab:id:"
)

type (
	userTabModel interface {
		Insert(ctx context.Context, data *UserTab) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserTab, error)
		Update(ctx context.Context, data *UserTab) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserTabModel struct {
		sqlc.CachedConn
		table string
	}

	UserTab struct {
		Id       int64  `db:"id"`
		Username string `db:"username"`
		Password string `db:"password"`
		Ctime    int64  `db:"ctime"`
		Mtime    int64  `db:"mtime"`
	}
)

func newUserTabModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserTabModel {
	return &defaultUserTabModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_tab`",
	}
}

func (m *defaultUserTabModel) Delete(ctx context.Context, id int64) error {
	userTabIdKey := fmt.Sprintf("%s%v", cacheUserTabIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, userTabIdKey)
	return err
}

func (m *defaultUserTabModel) FindOne(ctx context.Context, id int64) (*UserTab, error) {
	userTabIdKey := fmt.Sprintf("%s%v", cacheUserTabIdPrefix, id)
	var resp UserTab
	err := m.QueryRowCtx(ctx, &resp, userTabIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userTabRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserTabModel) Insert(ctx context.Context, data *UserTab) (sql.Result, error) {
	userTabIdKey := fmt.Sprintf("%s%v", cacheUserTabIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, userTabRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.Password, data.Ctime, data.Mtime)
	}, userTabIdKey)
	return ret, err
}

func (m *defaultUserTabModel) Update(ctx context.Context, data *UserTab) error {
	userTabIdKey := fmt.Sprintf("%s%v", cacheUserTabIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userTabRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Username, data.Password, data.Ctime, data.Mtime, data.Id)
	}, userTabIdKey)
	return err
}

func (m *defaultUserTabModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserTabIdPrefix, primary)
}

func (m *defaultUserTabModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userTabRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserTabModel) tableName() string {
	return m.table
}
